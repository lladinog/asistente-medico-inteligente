import json
from datetime import datetime
from app.config import COLORS

class DiagnosticoAgent:
    """Agente de inteligencia artificial para diagn√≥stico m√©dico preliminar"""
    
    def __init__(self):
        self.sintomas_comunes = {
            "fiebre": ["gripe", "infecci√≥n viral", "COVID-19", "infecci√≥n bacteriana"],
            "dolor_cabeza": ["migra√±a", "tensi√≥n", "deshidrataci√≥n", "fatiga visual"],
            "dolor_garganta": ["faringitis", "amigdalitis", "infecci√≥n viral", "alergia"],
            "tos": ["resfriado", "bronquitis", "alergia", "asma"],
            "dolor_abdominal": ["gastritis", "indigesti√≥n", "apendicitis", "c√≥lico"],
            "nausea": ["gastritis", "intoxicaci√≥n", "migra√±a", "ansiedad"],
            "fatiga": ["anemia", "depresi√≥n", "hipotiroidismo", "estr√©s"],
            "dolor_articular": ["artritis", "esguince", "gota", "fibromialgia"]
        }
        
        self.prioridades = {
            "emergencia": ["dolor_pecho", "dificultad_respirar", "p√©rdida_conciencia", "sangrado_abundante"],
            "urgente": ["fiebre_alta", "dolor_severo", "trauma_reciente", "v√≥mitos_persistentes"],
            "moderado": ["s√≠ntomas_leves", "malestar_general", "dolor_leve"],
            "leve": ["molestias_menores", "s√≠ntomas_transitorios"]
        }
    
    def analizar_sintomas(self, edad, sexo, sintomas, tiempo, intensidad):
        """
        Analiza los s√≠ntomas del paciente y genera un diagn√≥stico preliminar
        
        Args:
            edad (int): Edad del paciente
            sexo (str): Sexo del paciente (M/F/N)
            sintomas (str): Descripci√≥n de s√≠ntomas
            tiempo (str): Tiempo de evoluci√≥n
            intensidad (int): Intensidad del malestar (1-10)
        
        Returns:
            dict: Diagn√≥stico preliminar con recomendaciones
        """
        # Normalizar s√≠ntomas
        sintomas_lower = sintomas.lower()
        
        # Detectar s√≠ntomas clave
        sintomas_detectados = []
        for sintoma, condiciones in self.sintomas_comunes.items():
            if sintoma.replace("_", " ") in sintomas_lower:
                sintomas_detectados.extend(condiciones)
        
        # Determinar prioridad
        prioridad = self._determinar_prioridad(sintomas_lower, intensidad)
        
        # Generar diagn√≥stico preliminar
        diagnostico = self._generar_diagnostico(sintomas_detectados, edad, sexo, tiempo, intensidad)
        
        # Generar recomendaciones
        recomendaciones = self._generar_recomendaciones(prioridad, sintomas_detectados, edad)
        
        return {
            "diagnostico": diagnostico,
            "prioridad": prioridad,
            "recomendaciones": recomendaciones,
            "sintomas_detectados": sintomas_detectados,
            "fecha_analisis": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        }
    
    def _determinar_prioridad(self, sintomas, intensidad):
        """Determina la prioridad del caso basado en s√≠ntomas e intensidad"""
        if any(sintoma in sintomas for sintoma in self.prioridades["emergencia"]):
            return "emergencia"
        elif any(sintoma in sintomas for sintoma in self.prioridades["urgente"]):
            return "urgente"
        elif intensidad >= 7:
            return "moderado"
        else:
            return "leve"
    
    def _generar_diagnostico(self, sintomas_detectados, edad, sexo, tiempo, intensidad):
        """Genera un diagn√≥stico preliminar basado en los s√≠ntomas detectados"""
        if not sintomas_detectados:
            return "S√≠ntomas inespec√≠ficos. Se requiere m√°s informaci√≥n para un diagn√≥stico preliminar."
        
        # Tomar los s√≠ntomas m√°s frecuentes
        sintomas_principales = list(set(sintomas_detectados))[:3]
        
        diagnostico = f"Basado en los s√≠ntomas descritos, las posibilidades diagn√≥sticas incluyen: {', '.join(sintomas_principales)}. "
        
        if tiempo == "24h":
            diagnostico += "Los s√≠ntomas son de aparici√≥n reciente, lo que sugiere un proceso agudo. "
        elif tiempo in ["3d", "1w"]:
            diagnostico += "Los s√≠ntomas han persistido por varios d√≠as, requiriendo evaluaci√≥n m√©dica. "
        else:
            diagnostico += "Los s√≠ntomas de larga evoluci√≥n requieren evaluaci√≥n m√©dica especializada. "
        
        if intensidad >= 8:
            diagnostico += "La intensidad de los s√≠ntomas es alta, recomendando atenci√≥n m√©dica pronta. "
        
        return diagnostico
    
    def _generar_recomendaciones(self, prioridad, sintomas_detectados, edad):
        """Genera recomendaciones espec√≠ficas seg√∫n la prioridad y s√≠ntomas"""
        recomendaciones = []
        
        if prioridad == "emergencia":
            recomendaciones.extend([
                "üö® ACUDIR INMEDIATAMENTE A URGENCIAS",
                "üìû Llamar al servicio de emergencias local",
                "‚ö†Ô∏è No conducir si se siente mal"
            ])
        elif prioridad == "urgente":
            recomendaciones.extend([
                "üè• Consultar con un m√©dico en las pr√≥ximas 24 horas",
                "üìã Llevar lista de s√≠ntomas y medicamentos actuales",
                "üíä No automedicarse sin supervisi√≥n m√©dica"
            ])
        elif prioridad == "moderado":
            recomendaciones.extend([
                "üë®‚Äç‚öïÔ∏è Programar consulta m√©dica en los pr√≥ximos d√≠as",
                "üìù Mantener registro de s√≠ntomas",
                "üíß Mantener hidrataci√≥n adecuada",
                "üò¥ Descansar lo suficiente"
            ])
        else:
            recomendaciones.extend([
                "üëÄ Monitorear s√≠ntomas por 24-48 horas",
                "üíä Considerar medicamentos de venta libre si es apropiado",
                "üè† Mantener reposo relativo",
                "üìû Consultar si los s√≠ntomas empeoran"
            ])
        
        # Recomendaciones espec√≠ficas por s√≠ntomas
        if "fiebre" in str(sintomas_detectados).lower():
            recomendaciones.append("üå°Ô∏è Controlar temperatura regularmente")
        
        if "dolor" in str(sintomas_detectados).lower():
            recomendaciones.append("üíä Considerar analg√©sicos de venta libre")
        
        return recomendaciones
    
    def explicar_termino_medico(self, termino, nivel="intermedio"):
        """
        Explica un t√©rmino m√©dico en lenguaje sencillo
        
        Args:
            termino (str): T√©rmino m√©dico a explicar
            nivel (str): Nivel de explicaci√≥n (b√°sico, intermedio, avanzado)
        
        Returns:
            dict: Explicaci√≥n del t√©rmino m√©dico
        """
        terminos = {
            "hipertensi√≥n": {
                "b√°sico": "Presi√≥n arterial alta que puede da√±ar el coraz√≥n y otros √≥rganos",
                "intermedio": "Condici√≥n m√©dica caracterizada por presi√≥n arterial persistentemente elevada (>140/90 mmHg)",
                "avanzado": "Trastorno cardiovascular cr√≥nico con m√∫ltiples factores etiol√≥gicos incluyendo gen√©ticos, ambientales y de estilo de vida"
            },
            "diabetes": {
                "b√°sico": "Enfermedad donde el cuerpo no puede controlar bien el az√∫car en la sangre",
                "intermedio": "Trastorno metab√≥lico caracterizado por hiperglucemia cr√≥nica debido a deficiencia de insulina o resistencia a la misma",
                "avanzado": "S√≠ndrome metab√≥lico complejo con m√∫ltiples manifestaciones sist√©micas y complicaciones micro y macrovasculares"
            },
            "artritis": {
                "b√°sico": "Inflamaci√≥n de las articulaciones que causa dolor y rigidez",
                "intermedio": "Proceso inflamatorio articular que puede ser agudo o cr√≥nico, con m√∫ltiples etiolog√≠as",
                "avanzado": "T√©rmino general que engloba m√°s de 100 condiciones reum√°ticas que afectan las articulaciones"
            }
        }
        
        termino_lower = termino.lower()
        if termino_lower in terminos:
            explicacion = terminos[termino_lower].get(nivel, terminos[termino_lower]["intermedio"])
        else:
            explicacion = f"El t√©rmino '{termino}' se refiere a una condici√≥n m√©dica espec√≠fica. Para una explicaci√≥n detallada, consulta con un profesional de la salud."
        
        return {
            "termino": termino,
            "nivel": nivel,
            "explicacion": explicacion,
            "recomendacion": "Esta explicaci√≥n es informativa. Para diagn√≥stico y tratamiento, consulta con un m√©dico."
        } 