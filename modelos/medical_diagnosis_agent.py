#!/usr/bin/env python3
"""
Agente de diagn√≥stico m√©dico avanzado
Integra el sistema de diagn√≥stico m√©dico completo con la aplicaci√≥n refactorizada
"""

import sys
import os
from typing import Dict, List, Optional, Any
from datetime import datetime

# Agregar el directorio ra√≠z al path para importar el sistema de diagn√≥stico
current_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.dirname(current_dir)
sys.path.insert(0, root_dir)

# Importar el sistema de diagn√≥stico m√©dico
from modelos.diagnostico import create_medical_system, DiagnosisResult, UrgencyLevel

class MedicalDiagnosisAgent:
    """Agente de diagn√≥stico m√©dico avanzado que integra el sistema completo"""
    
    def __init__(self):
        """Inicializa el agente con el sistema de diagn√≥stico m√©dico"""
        self.medical_system = create_medical_system()
        self.conversation_history = []
        
    def analyze_symptoms(self, symptoms_text: str, patient_info: Optional[Dict] = None) -> Dict[str, Any]:
        """
        Analiza s√≠ntomas usando el sistema m√©dico avanzado
        
        Args:
            symptoms_text (str): Descripci√≥n de s√≠ntomas del paciente
            patient_info (dict, optional): Informaci√≥n del paciente (edad, sexo, etc.)
        
        Returns:
            dict: Resultado completo del an√°lisis m√©dico
        """
        try:
            # Procesar diagn√≥stico usando el sistema m√©dico
            diagnosis_result = self.medical_system.process_diagnosis(symptoms_text)
            
            # Formatear respuesta para la aplicaci√≥n
            formatted_response = self._format_diagnosis_for_app(diagnosis_result, patient_info)
            
            # Guardar en historial
            self._save_to_history(symptoms_text, diagnosis_result, patient_info)
            
            return formatted_response
            
        except Exception as e:
            return self._handle_error(f"Error en el an√°lisis m√©dico: {str(e)}")
    
    def chat_diagnosis(self, user_input: str) -> str:
        """
        Procesa consulta de chat usando el sistema m√©dico
        
        Args:
            user_input (str): Entrada del usuario
            
        Returns:
            str: Respuesta formateada del sistema m√©dico
        """
        try:
            return self.medical_system.chat_diagnosis(user_input)
        except Exception as e:
            return f"Error en el sistema de chat: {str(e)}"
    
    def explain_medical_term(self, term: str, level: str = "intermedio") -> Dict[str, Any]:
        """
        Explica t√©rminos m√©dicos usando el sistema avanzado
        
        Args:
            term (str): T√©rmino m√©dico a explicar
            level (str): Nivel de explicaci√≥n (simple, intermedio, detallado)
            
        Returns:
            dict: Explicaci√≥n del t√©rmino m√©dico
        """
        try:
            # Usar el sistema m√©dico para explicaciones m√°s completas
            explanation = self.medical_system.format_diagnosis_response(
                self.medical_system.process_diagnosis(f"explicar {term}")
            )
            
            return {
                "term": term,
                "level": level,
                "explanation": explanation,
                "timestamp": datetime.now().isoformat(),
                "source": "Sistema M√©dico Avanzado"
            }
        except Exception as e:
            return {
                "term": term,
                "level": level,
                "explanation": f"Error al procesar el t√©rmino: {str(e)}",
                "timestamp": datetime.now().isoformat(),
                "source": "Sistema M√©dico Avanzado"
            }
    
    def get_health_tips(self) -> str:
        """Obtiene consejos de salud del sistema m√©dico"""
        return self.medical_system.get_health_tips()
    
    def get_emergency_contacts(self) -> str:
        """Obtiene contactos de emergencia del sistema m√©dico"""
        return self.medical_system.get_emergency_contacts()
    
    def get_symptom_guide(self) -> str:
        """Obtiene gu√≠a para describir s√≠ntomas"""
        return self.medical_system.get_symptom_checker_guide()
    
    def get_conversation_history(self) -> List[Dict]:
        """Obtiene el historial de conversaciones"""
        return self.medical_system.get_conversation_history()
    
    def reset_conversation(self):
        """Reinicia el historial de conversaci√≥n"""
        self.medical_system.reset_conversation()
    
    def _format_diagnosis_for_app(self, diagnosis: DiagnosisResult, patient_info: Optional[Dict] = None) -> Dict[str, Any]:
        """
        Formatea el resultado del diagn√≥stico para la aplicaci√≥n Dash
        
        Args:
            diagnosis (DiagnosisResult): Resultado del diagn√≥stico m√©dico
            patient_info (dict, optional): Informaci√≥n del paciente
            
        Returns:
            dict: Resultado formateado para la aplicaci√≥n
        """
        urgency_emoji = {
            UrgencyLevel.EMERGENCY: "üö®",
            UrgencyLevel.URGENT: "‚ö†Ô∏è", 
            UrgencyLevel.ROUTINE: "‚ÑπÔ∏è",
            UrgencyLevel.FOLLOW_UP: "üìÖ"
        }
        
        # Calcular barras de confianza
        confidence_bars = "‚ñà" * int(diagnosis.confidence_level * 10) + "‚ñë" * (10 - int(diagnosis.confidence_level * 10))
        
        return {
            "success": True,
            "timestamp": datetime.now().isoformat(),
            "patient_info": patient_info,
            "diagnosis": {
                "possible_conditions": diagnosis.possible_conditions,
                "urgency_level": diagnosis.urgency_level.value,
                "urgency_emoji": urgency_emoji[diagnosis.urgency_level],
                "urgency_explanation": diagnosis.urgency_explanation,
                "recommendations": diagnosis.recommendations,
                "red_flags": diagnosis.red_flags,
                "confidence_level": diagnosis.confidence_level,
                "confidence_bars": confidence_bars,
                "follow_up_needed": diagnosis.follow_up_needed,
                "specialist_referral": diagnosis.specialist_referral
            },
            "formatted_response": self.medical_system.format_diagnosis_response(diagnosis),
            "source": "Sistema M√©dico Avanzado"
        }
    
    def _save_to_history(self, symptoms_text: str, diagnosis: DiagnosisResult, patient_info: Optional[Dict] = None):
        """Guarda la consulta en el historial"""
        self.conversation_history.append({
            "timestamp": datetime.now().isoformat(),
            "symptoms": symptoms_text,
            "patient_info": patient_info,
            "diagnosis": diagnosis,
            "source": "MedicalDiagnosisAgent"
        })
    
    def _handle_error(self, error_message: str) -> Dict[str, Any]:
        """Maneja errores del sistema m√©dico"""
        return {
            "success": False,
            "error": error_message,
            "timestamp": datetime.now().isoformat(),
            "recommendation": "Consultar con un profesional m√©dico inmediatamente",
            "source": "Sistema M√©dico Avanzado"
        }
    
    def get_system_info(self) -> Dict[str, Any]:
        """Obtiene informaci√≥n del sistema m√©dico"""
        return {
            "system_name": "Sistema de Diagn√≥stico M√©dico Avanzado",
            "version": "2.0",
            "features": [
                "An√°lisis de s√≠ntomas con NLP",
                "Evaluaci√≥n de urgencia m√©dica",
                "Identificaci√≥n de condiciones posibles",
                "Detecci√≥n de se√±ales de alarma",
                "Generaci√≥n de recomendaciones",
                "C√°lculo de nivel de confianza",
                "Historial de conversaciones"
            ],
            "knowledge_base": "Base de conocimiento m√©dico completa",
            "specialties": [
                "Respiratorio", "Cardiovascular", "Gastrointestinal",
                "Neurol√≥gico", "Dermatol√≥gico", "Musculoesquel√©tico"
            ],
            "timestamp": datetime.now().isoformat()
        }

# Funci√≥n para crear una instancia del agente
def create_medical_diagnosis_agent():
    """Crea y retorna una instancia del agente de diagn√≥stico m√©dico"""
    return MedicalDiagnosisAgent() 