import dash
from dash import html, dcc, Input, Output, State, callback
import dash_bootstrap_components as dbc
from styles.functional_view import FUNCTIONAL_VIEW_STYLES

def create_functional_view_component():
    """Crea el componente FunctionalView"""
    return html.Div([
        dbc.Button(
            html.I(className="fas fa-times"),
            id='functional-close-button',
            style=FUNCTIONAL_VIEW_STYLES['functional-close-button']
        ),
        html.Div(id='functional-content', style=FUNCTIONAL_VIEW_STYLES['functional-content'])
    ], id='functional-view', style=FUNCTIONAL_VIEW_STYLES['functional-view'])

def create_diagnostico_content(sintomas=None, diagnosticos=None, paciente_info=None):
    """Contenido para la funcionalidad de diagn√≥stico"""
    
    # Componentes default
    default_sintomas = html.P("Ingresa tus s√≠ntomas en el chat para obtener un an√°lisis detallado.", 
                             style=FUNCTIONAL_VIEW_STYLES['content-text'])
    default_diagnosticos = html.P("Los diagn√≥sticos aparecer√°n aqu√≠ despu√©s del an√°lisis.", 
                                style=FUNCTIONAL_VIEW_STYLES['content-text'])
    
    # Componentes espec√≠ficos si hay par√°metros
    sintomas_content = []
    if sintomas:
        sintomas_content.append(html.H6("S√≠ntomas reportados:", style={'margin-bottom': '10px'}))
        if isinstance(sintomas, list):
            for s in sintomas:
                sintomas_content.append(html.Li(s, style={'margin-left': '20px'}))
        else:
            sintomas_content.append(html.P(sintomas))
    else:
        sintomas_content.append(default_sintomas)
    
    diagnosticos_content = []
    if diagnosticos:
        diagnosticos_content.append(html.H6("Posibles diagn√≥sticos:", style={'margin-bottom': '10px'}))
        if isinstance(diagnosticos, list):
            for d in diagnosticos:
                diagnosticos_content.append(html.Li(d, style={'margin-left': '20px'}))
        else:
            diagnosticos_content.append(html.P(diagnosticos))
    else:
        diagnosticos_content.append(default_diagnosticos)
    
    # Info del paciente si est√° disponible
    paciente_section = []
    if paciente_info:
        paciente_section = [
            dbc.Card([
                dbc.CardBody([
                    html.H6("üë§ Informaci√≥n del Paciente", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                    html.Div([
                        html.P(f"Nombre: {paciente_info.get('nombre', 'No disponible')}"),
                        html.P(f"Edad: {paciente_info.get('edad', 'No disponible')}"),
                        html.P(f"G√©nero: {paciente_info.get('genero', 'No disponible')}")
                    ])
                ])
            ], style=FUNCTIONAL_VIEW_STYLES['content-card'])
        ]
    
    return html.Div([
        html.H4("üîç Diagn√≥stico M√©dico", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
        html.P("An√°lisis detallado de s√≠ntomas y posibles diagn√≥sticos.", style=FUNCTIONAL_VIEW_STYLES['content-text']),
        
        *paciente_section,
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üìã S√≠ntomas Analizados", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='sintomas-analizados', children=sintomas_content)
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üè• Posibles Diagn√≥sticos", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='diagnosticos-posibles', children=diagnosticos_content)
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("‚ö†Ô∏è Recomendaciones", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='recomendaciones-diagnostico', children=[
                    html.P("‚Ä¢ Consulta siempre con un profesional de la salud", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text']),
                    html.P("‚Ä¢ Este es solo un an√°lisis preliminar", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text']),
                    html.P("‚Ä¢ No reemplaza la evaluaci√≥n m√©dica profesional", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text'])
                ])
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card'])
    ])

def create_explicacion_content(termino=None, explicacion=None):
    """Contenido para la funcionalidad de explicaci√≥n m√©dica"""
    
    # Componente default
    default_content = html.P("Pregunta sobre cualquier t√©rmino m√©dico en el chat.", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text'])
    
    # Componente espec√≠fico si hay par√°metros
    termino_content = []
    if termino and explicacion:
        termino_content.append(html.H6(f"T√©rmino: {termino}", style={'margin-bottom': '10px'}))
        termino_content.append(html.P(explicacion))
    else:
        termino_content.append(default_content)
    
    return html.Div([
        html.H4("üìö Explicaci√≥n M√©dica", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
        html.P("Explicaciones detalladas de t√©rminos y conceptos m√©dicos.", style=FUNCTIONAL_VIEW_STYLES['content-text']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üî§ T√©rminos Explicados", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='terminos-explicados', children=termino_content)
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üìñ Conceptos M√©dicos", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='conceptos-medicos', children=[
                    html.P("Aqu√≠ aparecer√°n explicaciones de conceptos m√©dicos.", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text'])
                ])
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card'])
    ])

def create_interpretacion_examenes_content(file_path=None, resultados=None):
    """Contenido para la funcionalidad de interpretaci√≥n de ex√°menes"""
    
    # Componente default
    default_content = html.Div([
        html.P("Sube o describe tus resultados de ex√°menes en el chat.", 
               style=FUNCTIONAL_VIEW_STYLES['content-text']),
        dcc.Upload(
            id='upload-examenes',
            children=dbc.Button(
                "üìé Adjuntar archivo (PDF o TXT)",
                color="primary",
                className="me-1"
            ),
            multiple=False
        )
    ])
    
    # Componente espec√≠fico si hay par√°metros
    resultados_content = []
    if file_path:
        # Mostrar el archivo o su contenido
        resultados_content.append(html.H6("Archivo adjunto:", style={'margin-bottom': '10px'}))
        resultados_content.append(html.P(f"Archivo: {file_path}"))
        
        # Bot√≥n para ver el archivo (simulado)
        resultados_content.append(dbc.Button(
            "üëÅÔ∏è Ver archivo",
            color="info",
            className="me-1",
            style={'margin-top': '10px'}
        ))
    else:
        resultados_content.append(default_content)
    
    # Resultados del an√°lisis si est√°n disponibles
    analisis_content = []
    if resultados:
        analisis_content.append(html.H6("Interpretaci√≥n:", style={'margin-bottom': '10px'}))
        if isinstance(resultados, dict):
            for key, value in resultados.items():
                analisis_content.append(html.P(f"{key}: {value}"))
        else:
            analisis_content.append(html.P(resultados))
    
    return html.Div([
        html.H4("üî¨ Interpretaci√≥n de Ex√°menes", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
        html.P("An√°lisis e interpretaci√≥n de resultados de ex√°menes m√©dicos.", style=FUNCTIONAL_VIEW_STYLES['content-text']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üìä Resultados de Ex√°menes", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='resultados-examenes', children=resultados_content)
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üìà An√°lisis de Resultados", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='valores-referencia', children=analisis_content if analisis_content else [
                    html.P("Aqu√≠ aparecer√°n los valores normales y su interpretaci√≥n.", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text'])
                ])
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("‚ö†Ô∏è Importante", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='importante-examenes', children=[
                    html.P("‚Ä¢ La interpretaci√≥n es solo informativa", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text']),
                    html.P("‚Ä¢ Consulta siempre con tu m√©dico", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text']),
                    html.P("‚Ä¢ Los valores pueden variar seg√∫n el laboratorio", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text'])
                ])
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card'])
    ])

def create_contacto_medico_content(medico_info=None, centros=None):
    """Contenido para la funcionalidad de contacto m√©dico"""
    
    # Componente default
    default_content = html.P("Busca centros m√©dicos en tu √°rea en el chat.", 
                            style=FUNCTIONAL_VIEW_STYLES['content-text'])
    
    # Componente espec√≠fico si hay par√°metros
    medico_content = []
    if medico_info:
        medico_content.append(html.H6("M√©dico asignado:", style={'margin-bottom': '10px'}))
        medico_content.append(html.P(f"Nombre: {medico_info.get('nombre', 'No disponible')}"))
        medico_content.append(html.P(f"Especialidad: {medico_info.get('especialidad', 'No disponible')}"))
        medico_content.append(html.P(f"Contacto: {medico_info.get('contacto', 'No disponible')}"))
    else:
        medico_content.append(default_content)
    
    # Lista de centros si est√° disponible
    centros_content = []
    if centros:
        centros_content.append(html.H6("Centros m√©dicos recomendados:", style={'margin-bottom': '10px'}))
        if isinstance(centros, list):
            for centro in centros:
                centros_content.append(html.Li(
                    html.Div([
                        html.Strong(centro.get('nombre', 'Centro m√©dico')),
                        html.Br(),
                        html.Span(f"Direcci√≥n: {centro.get('direccion', 'No disponible')}"),
                        html.Br(),
                        html.Span(f"Tel√©fono: {centro.get('telefono', 'No disponible')}")
                    ]),
                    style={'margin-bottom': '10px'}
                ))
        else:
            centros_content.append(html.P(centros))
    
    return html.Div([
        html.H4("üë®‚Äç‚öïÔ∏è Contacto M√©dico", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
        html.P("Informaci√≥n de contacto y localizaci√≥n de profesionales de la salud.", style=FUNCTIONAL_VIEW_STYLES['content-text']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üè• Centros M√©dicos Cercanos", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='centros-medicos', children=centros_content if centros_content else [
                    html.P("Busca centros m√©dicos en tu √°rea en el chat.", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text'])
                ])
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üë®‚Äç‚öïÔ∏è Especialista Asignado", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='especialistas', children=medico_content)
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üìû Informaci√≥n de Contacto", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='info-contacto', children=[
                    html.P("Tel√©fonos, direcciones y horarios de atenci√≥n.", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text'])
                ])
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card'])
    ])

def create_busqueda_content(termino=None, resultados=None):
    """Contenido para la funcionalidad de b√∫squeda"""
    
    # Componente default
    default_content = html.P("Busca informaci√≥n m√©dica espec√≠fica en el chat.", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text'])
    
    # Componente espec√≠fico si hay par√°metros
    busqueda_content = []
    if termino:
        busqueda_content.append(html.H6(f"B√∫squeda: {termino}", style={'margin-bottom': '10px'}))
    else:
        busqueda_content.append(default_content)
    
    # Resultados de b√∫squeda si est√°n disponibles
    resultados_content = []
    if resultados:
        resultados_content.append(html.H6("Resultados encontrados:", style={'margin-bottom': '10px'}))
        if isinstance(resultados, list):
            for r in resultados:
                resultados_content.append(html.Div([
                    html.A(r.get('titulo', 'Sin t√≠tulo'), href=r.get('enlace', '#'), target="_blank"),
                    html.P(r.get('descripcion', 'Sin descripci√≥n')),
                    html.Hr()
                ]))
        else:
            resultados_content.append(html.P(resultados))
    
    return html.Div([
        html.H4("üîç B√∫squeda M√©dica", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
        html.P("B√∫squeda de informaci√≥n m√©dica y recursos de salud.", style=FUNCTIONAL_VIEW_STYLES['content-text']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üìö Recursos M√©dicos", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='recursos-medicos', children=busqueda_content)
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üìñ Resultados de B√∫squeda", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='articulos-estudios', children=resultados_content if resultados_content else [
                    html.P("Aqu√≠ aparecer√°n art√≠culos y estudios relevantes.", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text'])
                ])
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card'])
    ])

def create_analizar_imagenes_content(image_path=None, resultados=None):
    """Contenido para la funcionalidad de an√°lisis de im√°genes"""
    
    # Componente default
    default_content = html.Div([
        html.P("Sube una imagen m√©dica en el chat para su an√°lisis.", 
               style=FUNCTIONAL_VIEW_STYLES['content-text']),
        dcc.Upload(
            id='upload-imagen',
            children=dbc.Button(
                "üì∑ Adjuntar imagen",
                color="primary",
                className="me-1"
            ),
            multiple=False
        )
    ])
    
    # Componente espec√≠fico si hay par√°metros
    imagen_content = []
    if image_path:
        imagen_content.append(html.H6("Imagen para an√°lisis:", style={'margin-bottom': '10px'}))
        imagen_content.append(html.Img(src=image_path, style={'max-width': '100%', 'max-height': '300px'}))
        imagen_content.append(dbc.Button(
            "üîÑ Cambiar imagen",
            color="secondary",
            className="me-1",
            style={'margin-top': '10px'}
        ))
    else:
        imagen_content.append(default_content)
    
    # Resultados del an√°lisis si est√°n disponibles
    analisis_content = []
    if resultados:
        analisis_content.append(html.H6("Hallazgos:", style={'margin-bottom': '10px'}))
        if isinstance(resultados, dict):
            for key, value in resultados.items():
                analisis_content.append(html.P(f"{key}: {value}"))
        else:
            analisis_content.append(html.P(resultados))
    
    return html.Div([
        html.H4("üñºÔ∏è An√°lisis de Im√°genes", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
        html.P("An√°lisis de im√°genes m√©dicas y diagn√≥sticos visuales.", style=FUNCTIONAL_VIEW_STYLES['content-text']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üì∏ Imagen Analizada", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='imagen-analizada', children=imagen_content)
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üîç Resultados del An√°lisis", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='resultados-imagen', children=analisis_content if analisis_content else [
                    html.P("Los resultados del an√°lisis aparecer√°n aqu√≠.", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text'])
                ])
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("‚ö†Ô∏è Limitaciones", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='limitaciones-imagen', children=[
                    html.P("‚Ä¢ El an√°lisis es preliminar", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text']),
                    html.P("‚Ä¢ Consulta siempre con un radi√≥logo", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text']),
                    html.P("‚Ä¢ No reemplaza la evaluaci√≥n profesional", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text'])
                ])
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card'])
    ])

def create_centros_cercanos_content(municipio=None, centros=None):
    """Contenido para la funcionalidad de b√∫squeda de centros cercanos"""
    
    # Mapa de Colombia por defecto
    mapa_content = html.Iframe(
        src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d16284026.303741757!2d-83.72287695!3d4.57086835!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x8e15a43aae1594a3%3A0x9a0d9a04eff2a340!2sColombia!5e0!3m2!1ses!2sco!4v1620000000000!5m2!1ses!2sco",
        width="100%",
        height="300",
        style={"border": "0"},
        allowFullScreen="",
        loading="lazy"
    )
    
    # Actualizar mapa si se selecciona un municipio
    if municipio:
        mapa_content = html.Iframe(
            src=f"https://www.google.com/maps/embed/v1/place?key=YOUR_API_KEY&q={municipio},Colombia",
            width="100%",
            height="300",
            style={"border": "0"},
            allowFullScreen="",
            loading="lazy"
        )
    
    # Selector de municipio
    municipio_selector = dcc.Dropdown(
        id='municipio-selector',
        options=[
            {'label': 'Bogot√°', 'value': 'Bogot√°'},
            {'label': 'Medell√≠n', 'value': 'Medell√≠n'},
            {'label': 'Cali', 'value': 'Cali'},
            {'label': 'Barranquilla', 'value': 'Barranquilla'},
            {'label': 'Cartagena', 'value': 'Cartagena'},
            {'label': 'Otra ciudad', 'value': 'other'}
        ],
        placeholder="Selecciona tu municipio",
        value=municipio if municipio else None
    )
    
    # Lista de centros si est√° disponible
    centros_content = []
    if centros:
        centros_content.append(html.H6("Centros m√©dicos cercanos:", style={'margin-bottom': '10px'}))
        if isinstance(centros, list):
            for centro in centros:
                centros_content.append(html.Div([
                    html.H5(centro.get('nombre', 'Centro m√©dico')),
                    html.P(f"üìç {centro.get('direccion', 'Direcci√≥n no disponible')}"),
                    html.P(f"üìû {centro.get('telefono', 'Tel√©fono no disponible')}"),
                    html.P(f"‚è∞ {centro.get('horario', 'Horario no disponible')}"),
                    html.P(f"üìå Distancia: {centro.get('distancia', '?')} km"),
                    html.Hr()
                ]))
        else:
            centros_content.append(html.P(centros))
    
    return html.Div([
        html.H4("üè• Centros M√©dicos Cercanos", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
        html.P("Encuentra los centros de atenci√≥n m√°s cercanos a tu ubicaci√≥n.", style=FUNCTIONAL_VIEW_STYLES['content-text']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üó∫Ô∏è Ubicaci√≥n", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                municipio_selector,
                html.Div(mapa_content, style={'margin-top': '15px'})
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("üè• Centros de Salud", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div(id='lista-centros', children=centros_content if centros_content else [
                    html.P("Selecciona un municipio para ver los centros m√©dicos disponibles.", 
                           style=FUNCTIONAL_VIEW_STYLES['content-text'])
                ])
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card']),
        
        dbc.Card([
            dbc.CardBody([
                html.H6("‚ÑπÔ∏è Informaci√≥n Adicional", style=FUNCTIONAL_VIEW_STYLES['content-card-header']),
                html.Div([
                    html.P("‚Ä¢ Los datos se actualizan peri√≥dicamente", style=FUNCTIONAL_VIEW_STYLES['content-text']),
                    html.P("‚Ä¢ Verifica horarios antes de visitar", style=FUNCTIONAL_VIEW_STYLES['content-text']),
                    html.P("‚Ä¢ Algunos centros requieren cita previa", style=FUNCTIONAL_VIEW_STYLES['content-text'])
                ])
            ])
        ], style=FUNCTIONAL_VIEW_STYLES['content-card'])
    ])